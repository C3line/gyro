/* DO NOT EDIT | Generated by gyro */

import protocol Decodable.Decodable
import Decodable

extension {{ entity.name }}: Decodable {

  static func decode(_ json: Any) throws -> {{ entity.name }} {
    {%- assign entityVariable = entity.name | uncapitalize  %}
    let {{ entityVariable }} = {{ entity.name }}()
    {%- for attribute in entity.attributes %}
      {% assign attributeKey = attribute.name -%}
      {%- if attribute.json_key_path.size > 0 -%}
        {%- assign attributeKey = attribute.json_key_path -%}
      {%- endif -%}
      {%- case attribute.type -%}
        {%- when "date" -%}
    {{ entityVariable }}.{{ attribute.name }} = try Date.decode(json => "{{ attributeKey }}")
        {%- when "integer_16" or "integer_32" or "integer_64" or "float" or "double" or "boolean" -%}
          {%- if attribute.optional == true -%}
            {%- if attribute.transformer.size > 0 -%}
    {{ entityVariable }}.{{ attribute.name }}.value = try {{ attribute.transformer }}.decode(json => "{{ attributeKey }}")
            {%- else -%}
    {{ entityVariable }}.{{ attribute.name }}.value = try json => "{{ attributeKey }}"
            {%- endif -%}
          {%- else -%}
            {%- if attribute.transformer.size > 0 -%}
    {{ entityVariable }}.{{ attribute.name }} = try {{ attribute.transformer }}.decode(json => "{{ attributeKey }}")
            {%- else -%}
    {{ entityVariable }}.{{ attribute.name }} = try json => "{{ attributeKey }}"
            {%- endif -%}
          {%- endif -%}
        {%- else -%}
            {%- if attribute.transformer.size > 0 -%}
    {{ entityVariable }}.{{ attribute.name }} = try {{ attribute.transformer }}.decode(json => "{{ attributeKey }}")
            {%- else -%}
    {{ entityVariable }}.{{ attribute.name }} = try json => "{{ attributeKey }}"
            {%- endif -%}
      {%- endcase -%}
    {%- endfor -%}

    {%- for relationship in entity.relationships %}
      {% assign relationKey = relationship.name -%}
      {%- if relationship.json_key_path.size > 0 -%}
        {%- assign relationKey = relationship.json_key_path -%}
      {%- endif -%}
      {%- if relationship.type == "to_many" -%}
    let {{ relationship.name }}Sandbox: [{{ relationship.inverse_type }}] = try json => "{{ relationKey }}"
    {{ entityVariable }}.{{ relationship.name }}.append(objectsIn: {{ relationship.name }}Sandbox)
      {%- else -%}
    {{ entityVariable }}.{{ relationship.name }} = try json => "{{ relationKey }}"
      {%- endif -%}
    {%- endfor %}
    return {{ entityVariable }}
  }

}