#!/usr/bin/env ruby

# Copyright 2016 - Niji
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

if RUBY_VERSION < '2.0.0'
  abort 'error: gyro requires Ruby 2 or higher.'
end

require 'gyro'
require 'optparse'
require 'pathname'

dir = Dir.pwd
options = {
  model: nil,
  android_dir: nil, 
  package: nil, 
  template: nil,
  output: nil,
  params: {}
}

OptionParser.new do |opts|
  opts.banner = 'Usage: gyro [options]'
  opts.on('-m PATH', '--model PATH', %q(Specify Interface Builder .xcdatamodel file)) do |xcdatamodel_path|
    options[:model] = xcdatamodel_path
  end
  opts.on('-a PATH', '--android PATH', %q(Specify Android Realm model classes dir)) do |path| 
    options[:android_dir] = path 
  end
  opts.on('-t DIR', '--template DIR', %q(Path to the Liquid template directrory to use, other solution is to specify default template name (like swift3, android) !)) do |tempate_path|
    options[:template] = tempate_path
  end
  opts.on('-o DIR', '--output DIR', %q(Path to the output directory to generate model)) do |output_dir_path|
    options[:output] = output_dir_path
  end
  opts.on('-p PATH', '--package PATH', %q(Specify Android Realm model classes package name)) do |path| 
    options[:package] = path 
  end 
  opts.on('-w', '--wrappers', %q(To generate Java primitive wrappers for optional fields instead of primitive types)) do 
    options[:wrappers] = true 
  end 
  opts.on('-x', '--annotations', %q(To tag code with Android support annotations according to optional/non optional fields)) do 
    options[:annotations] = true 
  end 
  opts.on('-p KEY:VALUE', '--param KEY:VALUE', %q(Custom parameters that you can use inside custom templates)) do |params|
    split_params = params.split(':')
    options[:params] = options[:params].merge("#{split_params[0]}" => "#{split_params[1]}")
  end
  opts.on_tail('-h', '--help', %q(Show this message)) do
    puts opts
    exit 1
  end
  opts.on_tail('-v', '--version', 'Show version') do
    puts Gyro::VERSION
    exit
  end
  opts.parse!
end

if options[:model].nil?
  Gyro::Log.info('No model provided, trying to find one in the local directoryâ€¦')
  options[:model] = Gyro.find_xcdatamodel(dir)
  Gyro::Log.info("Unable to find any .xcdatamodel in #{dir}") if options[:model].nil?
end

if options[:model].nil?
  Gyro::Error.exit_with_error('You need to specify .xcdatamodel path using --model option (see --help for more info)')
else
  basename = File.basename(options[:model])
  dirname = File.dirname(options[:model])
  Gyro::Log.success("Using #{basename} in #{dirname}")
end

unless options[:android_dir].nil?
  # Android
  if Dir.exist?(options[:android_dir])
    if options[:package].nil?
      Gyro::Log.info('You need to specify an Android package name using --package option (see --help for more info)')
    else
      xcdatamodel = Gyro::XCDataModel::Parser::XCDataModel.new(options[:model])
      Gyro::Realm::Java::Generator.new(options[:android_dir], options[:package], xcdatamodel, options[:wrappers], options[:annotations])
    end
  else
    Gyro::Log.info('You need to specify a valid Android Realm model classes dir')
  end
else
  # Liquid Templates
  if options[:template].nil?
    # Generate JSON if no -t is specified
    Gyro::Log.info('You can specify custom template directory or default template using --template option (see --help for more info)')
    xcdatamodel = Gyro::XCDataModel::Parser::XCDataModel.new(options[:model])
    Gyro::Json::Generator.new(xcdatamodel)
    exit
  end 

  template_dir = Gyro.search_template_dir(options[:template])

  if options[:output].nil?
    Gyro::Error.exit_with_error('You need to specify output directory path using --output option (see --help for more info)')
  end

  output_dir = Pathname.new(options[:output])

  unless output_dir.exist?
    Gyro::Error.exit_with_error("The output directory #{output_dir} does not exist. Please create it first.")
  end

  puts <<-INFO
  \n
  ===================================
  Template    : #{template_dir}
  Output Dir  : #{output_dir}
  Params      : #{options[:params].inspect}
  ===================================
  INFO

  xcdatamodel = Gyro::XCDataModel::Parser::XCDataModel.new(options[:model])
  Gyro::Liquidgen::Generator.new(xcdatamodel, template_dir, output_dir, options[:params])
end

