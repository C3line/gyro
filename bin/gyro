#!/usr/bin/env ruby

=begin
Copyright 2016 - Niji

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
=end

if RUBY_VERSION < '2.0.0'
  abort 'error: gyro requires Ruby 2 or higher.'
end

require 'gyro'
require 'optparse'

dir = Dir.pwd
options = {
    :model => nil,
    :template => nil,
    :output => nil
}

OptionParser.new do |opts|
  opts.banner = 'Usage: gyro [options]'
  opts.on('-m PATH', '--model PATH', %q(Specify Interface Builder .xcdatamodel file)) do |xcdatamodel_path|
    options[:model] = xcdatamodel_path
  end
  opts.on('-t TEMPLATEPATH', '--template TEMPLATEPATH', %q(Path to the Liquid template directrory to use, if you prefer using default template type name of your needed template (like swift3, android) !)) do |tempate_path|
    options[:template] = tempate_path
  end
  opts.on('-o OUTPUTDIR', '--output OUTPUTDIR', %q(Path to the output directory to generate model)) do |output_dir_path|
    options[:output] = output_dir_path
  end
  # opts.on('-p PARAM=PARAMVALUE', '--param PARAM=PARAMVALUE', %q(Path to the output directory to generate model)) do |output_dir_path|
  #   options[:output] = output_dir_path
  # end
  opts.on_tail('-h', '--help', %q(Show this message)) { puts opts; exit 1 }
  opts.on_tail('-v', '--version', 'Show version') { puts Gyro::VERSION; exit }
  opts.parse!
end

if options[:model].nil?
  Gyro::Log::info('No model provided, trying to find one in the local directory…')
  options[:model] = Gyro.find_xcdatamodel(dir)
  Gyro::Log::info("Unable to find any .xcdatamodel in #{dir}") if options[:model].nil?
end

if options[:model].nil?
  Gyro::Error::exit_with_error('You need to specify .xcdatamodel path using --model option (see --help for more info)')
else
  basename = File.basename(options[:model])
  dirname = File.dirname(options[:model])
  Gyro::Log::success("Using #{basename} in #{dirname}")
end

# @todo : like this, find default template directory instead of custom directory if --template have no /
# if options[:template].nil?
#   # Gyro::Log::info('No model provided, trying to find one in the local directory…')
#   # options[:model] = Gyro.find_xcdatamodel(dir)
#   # Gyro::Log::info("Unable to find any .xcdatamodel in #{dir}") if options[:model].nil?
# end

if options[:template].nil?
  # Generate JSON if no -t is specified
  Gyro::Log::info('You can specify custom template directory or default template using --template option (see --help for more info)')
  xcdatamodel = Gyro::XCDataModel::Parser::XCDataModel.new(options[:model])
  Gyro::Json::Generator.new(xcdatamodel)
  exit
end

if options[:output].nil?
  Gyro::Error::exit_with_error('You need to specify output directory path using --output option (see --help for more info)')
end

xcdatamodel = Gyro::XCDataModel::Parser::XCDataModel.new(options[:model])
Gyro::LiquidGen::Generator.new(xcdatamodel, options[:template], options[:output])
